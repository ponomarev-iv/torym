/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$i-delivery-name: 'i-delivery';
$i-delivery-x: 0px;
$i-delivery-y: 0px;
$i-delivery-offset-x: 0px;
$i-delivery-offset-y: 0px;
$i-delivery-width: 104px;
$i-delivery-height: 104px;
$i-delivery-total-width: 234px;
$i-delivery-total-height: 211px;
$i-delivery-image: '../img/sprite.png';
$i-delivery: (0px, 0px, 0px, 0px, 104px, 104px, 234px, 211px, '../img/sprite.png', 'i-delivery', );
$i-garant-name: 'i-garant';
$i-garant-x: 107px;
$i-garant-y: 0px;
$i-garant-offset-x: -107px;
$i-garant-offset-y: 0px;
$i-garant-width: 104px;
$i-garant-height: 104px;
$i-garant-total-width: 234px;
$i-garant-total-height: 211px;
$i-garant-image: '../img/sprite.png';
$i-garant: (107px, 0px, -107px, 0px, 104px, 104px, 234px, 211px, '../img/sprite.png', 'i-garant', );
$i-job-name: 'i-job';
$i-job-x: 0px;
$i-job-y: 107px;
$i-job-offset-x: 0px;
$i-job-offset-y: -107px;
$i-job-width: 104px;
$i-job-height: 104px;
$i-job-total-width: 234px;
$i-job-total-height: 211px;
$i-job-image: '../img/sprite.png';
$i-job: (0px, 107px, 0px, -107px, 104px, 104px, 234px, 211px, '../img/sprite.png', 'i-job', );
$i-minimal-name: 'i-minimal';
$i-minimal-x: 107px;
$i-minimal-y: 107px;
$i-minimal-offset-x: -107px;
$i-minimal-offset-y: -107px;
$i-minimal-width: 104px;
$i-minimal-height: 104px;
$i-minimal-total-width: 234px;
$i-minimal-total-height: 211px;
$i-minimal-image: '../img/sprite.png';
$i-minimal: (107px, 107px, -107px, -107px, 104px, 104px, 234px, 211px, '../img/sprite.png', 'i-minimal', );
$i-search-name: 'i-search';
$i-search-x: 214px;
$i-search-y: 0px;
$i-search-offset-x: -214px;
$i-search-offset-y: 0px;
$i-search-width: 20px;
$i-search-height: 21px;
$i-search-total-width: 234px;
$i-search-total-height: 211px;
$i-search-image: '../img/sprite.png';
$i-search: (214px, 0px, -214px, 0px, 20px, 21px, 234px, 211px, '../img/sprite.png', 'i-search', );
$spritesheet-width: 234px;
$spritesheet-height: 211px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($i-delivery, $i-garant, $i-job, $i-minimal, $i-search, );
$spritesheet: (234px, 211px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
